const cities = [
  { name: "–•–∞—Ä–∫—ñ–≤", q: "Kharkiv,UA" },
  { name: "–ö–∏—ó–≤", q: "Kyiv,UA" },
  { name: "–û–¥–µ—Å–∞", q: "Odesa,UA" }
];
const apiKey = "71b91e163a677e6ea8062a6a94db5ac7";
const lang = "ua";
const units = "metric";
const cacheKey = "weatherDataCache";
const cacheTTL = 10 * 60 * 1000; // 10 –º–∏–Ω—É—Ç –≤ –º—Å

function windDirection(deg) {
  const dirs = ["–ü–Ω", "–ü–Ω-–°—Ö", "–°—Ö", "–ü–¥-–°—Ö", "–ü–¥", "–ü–¥-–ó—Ö", "–ó—Ö", "–ü–Ω-–ó—Ö"];
  return dirs[Math.round(deg / 45) % 8];
}

function renderWeather(data, cityName) {
  const pressureMmHg = Math.round(data.main.pressure * 0.750062);
  return `
    <div class="city">${cityName}</div>
    <div class="temp">${Math.round(data.main.temp)}¬∞C</div>
    <div class="desc">${data.weather[0].description[0].toUpperCase() + data.weather[0].description.slice(1)}</div>
    <div class="details">
      <span title="–í–æ–ª–æ–≥—ñ—Å—Ç—å">üíß ${data.main.humidity}%</span>
      <span title="–¢–∏—Å–∫">üå°Ô∏è ${pressureMmHg} –º–º —Ä—Ç. —Å—Ç.</span>
      <span title="–í—ñ—Ç–µ—Ä">üí® ${windDirection(data.wind.deg)} ${Math.round(data.wind.speed)} –º/—Å</span>
    </div>
  `;
}

async function fetchWeather() {
  const results = [];
  for (const city of cities) {
    const url = `https://api.openweathermap.org/data/2.5/weather?q=${encodeURIComponent(city.q)}&appid=${apiKey}&units=${units}&lang=${lang}`;
    const res = await fetch(url);
    if (!res.ok) throw new Error("API error");
    const data = await res.json();
    results.push({ cityName: city.name, data });
  }
  return results;
}

async function loadWeather(forceUpdate = false) {
  const widget = document.getElementById("weather-widget");
  widget.innerHTML = "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–≥–æ–¥–∏...";
  
  try {
    let cached = localStorage.getItem(cacheKey);
    let cacheObj = cached ? JSON.parse(cached) : null;
    const now = Date.now();

    if (!forceUpdate && cacheObj && (now - cacheObj.timestamp < cacheTTL)) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à
      const html = cacheObj.data.map(item => renderWeather(item.data, item.cityName)).join('<hr>');
      widget.innerHTML = html;
    } else {
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
      const freshData = await fetchWeather();
      localStorage.setItem(cacheKey, JSON.stringify({ timestamp: now, data: freshData }));
      const html = freshData.map(item => renderWeather(item.data, item.cityName)).join('<hr>');
      widget.innerHTML = html;
    }
  } catch (e) {
    widget.innerHTML = "–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–≥–æ–¥–∏";
    console.error(e);
  }
}

// –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ‚Äî –≤—Å–µ–≥–¥–∞ –¥–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–µ—à
document.getElementById("refresh-weather-btn").addEventListener("click", () => {
  loadWeather(true);
});

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (—Å –∫–µ—à–µ–º)
loadWeather();